#pragma once
#include "Renderer.h"
#include "Engine/Core/Renderer/RenderGraph.h"
#include "VulkanPlazaPipeline.h"
#include "VulkanPlazaInitializator.h"
#include "VulkanTexture.h"
#include "VulkanPlazaWrapper.h"
#include "Engine/Core/Renderer/Buffer.h"
#include "Engine/Core/Engine.h"
#include <ThirdParty/cereal/cereal/types/polymorphic.hpp>
#include "Engine/Core/Renderer/RendererTypes.h"

namespace Plaza {
	static VkDescriptorType PlBufferTypeToVkDescriptorType(PlBufferType type) {
		VkDescriptorType convertedType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
		switch (type) {
			case PL_BUFFER_PUSH_CONSTANTS:
				return VK_DESCRIPTOR_TYPE_MAX_ENUM;
			case PL_BUFFER_UNIFORM_BUFFER:
				return VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
			case PL_BUFFER_STORAGE_BUFFER:
				return VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
			case PL_BUFFER_STORAGE_BUFFER_DYNAMIC:
				return VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC;
			case PL_BUFFER_SAMPLER:
				return VK_DESCRIPTOR_TYPE_SAMPLER;
			case PL_BUFFER_COMBINED_IMAGE_SAMPLER:
				return VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
			case PL_BUFFER_SAMPLED_IMAGE:
				return VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
			case PL_BUFFER_STORAGE_IMAGE:
				return VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
			case PL_BUFFER_INPUT_ATTACHMENT:
				return VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT;
		}
		// switch (type) {
		// case PL_BUFFER_UNIFORM_BUFFER:
		//	convertedType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
		//	break;
		// case PL_BUFFER_STORAGE_BUFFER:
		//	convertedType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
		//	break;
		// case PL_BUFFER_STORAGE_BUFFER_DYNAMIC:
		//	convertedType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC;
		//	break;
		// case PL_BUFFER_SAMPLER:
		//	convertedType = VK_DESCRIPTOR_TYPE_SAMPLER;
		//	break;
		// case PL_BUFFER_COMBINED_IMAGE_SAMPLER:
		//	convertedType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
		//	break;
		// }
		return convertedType;
	}

	static VkImageType PlTextureTypeToVkImageType(PlTextureType type) {
		VkImageType convertedType = VK_IMAGE_TYPE_2D;
		switch (type) {
			case PL_TYPE_1D:
				convertedType = VK_IMAGE_TYPE_1D;
				break;
			case PL_TYPE_2D:
				convertedType = VK_IMAGE_TYPE_2D;
				break;
			case PL_TYPE_3D:
				convertedType = VK_IMAGE_TYPE_3D;
				break;
		}
		return convertedType;
	}

	static VkImageViewType PlViewTypeToVkImageViewType(PlViewType type) {
		VkImageViewType convertedType = VK_IMAGE_VIEW_TYPE_1D;
		switch (type) {
			case PL_VIEW_TYPE_1D:
				convertedType = VK_IMAGE_VIEW_TYPE_1D;
				break;
			case PL_VIEW_TYPE_2D:
				convertedType = VK_IMAGE_VIEW_TYPE_2D;
				break;
			case PL_VIEW_TYPE_3D:
				convertedType = VK_IMAGE_VIEW_TYPE_3D;
				break;
			case PL_VIEW_TYPE_CUBE:
				convertedType = VK_IMAGE_VIEW_TYPE_CUBE;
				break;
			case PL_VIEW_TYPE_1D_ARRAY:
				convertedType = VK_IMAGE_VIEW_TYPE_1D_ARRAY;
				break;
			case PL_VIEW_TYPE_2D_ARRAY:
				convertedType = VK_IMAGE_VIEW_TYPE_2D_ARRAY;
				break;
			case PL_VIEW_TYPE_CUBE_ARRAY:
				convertedType = VK_IMAGE_VIEW_TYPE_CUBE_ARRAY;
				break;
		}
		return convertedType;
	}

	static VkFormat PlImageFormatToVkFormat(PlTextureFormat format) {
		switch (format) {
			case PL_FORMAT_UNDEFINED:
				return VK_FORMAT_UNDEFINED;
			case PL_FORMAT_R4G4_UNORM_PACK8:
				return VK_FORMAT_R4G4_UNORM_PACK8;
			case PL_FORMAT_R4G4B4A4_UNORM_PACK16:
				return VK_FORMAT_R4G4B4A4_UNORM_PACK16;
			case PL_FORMAT_B4G4R4A4_UNORM_PACK16:
				return VK_FORMAT_B4G4R4A4_UNORM_PACK16;
			case PL_FORMAT_R5G6B5_UNORM_PACK16:
				return VK_FORMAT_R5G6B5_UNORM_PACK16;
			case PL_FORMAT_B5G6R5_UNORM_PACK16:
				return VK_FORMAT_B5G6R5_UNORM_PACK16;
			case PL_FORMAT_R5G5B5A1_UNORM_PACK16:
				return VK_FORMAT_R5G5B5A1_UNORM_PACK16;
			case PL_FORMAT_B5G5R5A1_UNORM_PACK16:
				return VK_FORMAT_B5G5R5A1_UNORM_PACK16;
			case PL_FORMAT_A1R5G5B5_UNORM_PACK16:
				return VK_FORMAT_A1R5G5B5_UNORM_PACK16;
			case PL_FORMAT_R8_UNORM:
				return VK_FORMAT_R8_UNORM;
			case PL_FORMAT_R8_SNORM:
				return VK_FORMAT_R8_SNORM;
			case PL_FORMAT_R8_USCALED:
				return VK_FORMAT_R8_USCALED;
			case PL_FORMAT_R8_SSCALED:
				return VK_FORMAT_R8_SSCALED;
			case PL_FORMAT_R8_UINT:
				return VK_FORMAT_R8_UINT;
			case PL_FORMAT_R8_SINT:
				return VK_FORMAT_R8_SINT;
			case PL_FORMAT_R8_SRGB:
				return VK_FORMAT_R8_SRGB;
			case PL_FORMAT_R8G8_UNORM:
				return VK_FORMAT_R8G8_UNORM;
			case PL_FORMAT_R8G8_SNORM:
				return VK_FORMAT_R8G8_SNORM;
			case PL_FORMAT_R8G8_USCALED:
				return VK_FORMAT_R8G8_USCALED;
			case PL_FORMAT_R8G8_SSCALED:
				return VK_FORMAT_R8G8_SSCALED;
			case PL_FORMAT_R8G8_UINT:
				return VK_FORMAT_R8G8_UINT;
			case PL_FORMAT_R8G8_SINT:
				return VK_FORMAT_R8G8_SINT;
			case PL_FORMAT_R8G8_SRGB:
				return VK_FORMAT_R8G8_SRGB;
			case PL_FORMAT_R8G8B8_UNORM:
				return VK_FORMAT_R8G8B8_UNORM;
			case PL_FORMAT_R8G8B8_SNORM:
				return VK_FORMAT_R8G8B8_SNORM;
			case PL_FORMAT_R8G8B8_USCALED:
				return VK_FORMAT_R8G8B8_USCALED;
			case PL_FORMAT_R8G8B8_SSCALED:
				return VK_FORMAT_R8G8B8_SSCALED;
			case PL_FORMAT_R8G8B8_UINT:
				return VK_FORMAT_R8G8B8_UINT;
			case PL_FORMAT_R8G8B8_SINT:
				return VK_FORMAT_R8G8B8_SINT;
			case PL_FORMAT_R8G8B8_SRGB:
				return VK_FORMAT_R8G8B8_SRGB;
			case PL_FORMAT_B8G8R8_UNORM:
				return VK_FORMAT_B8G8R8_UNORM;
			case PL_FORMAT_B8G8R8_SNORM:
				return VK_FORMAT_B8G8R8_SNORM;
			case PL_FORMAT_B8G8R8_USCALED:
				return VK_FORMAT_B8G8R8_USCALED;
			case PL_FORMAT_B8G8R8_SSCALED:
				return VK_FORMAT_B8G8R8_SSCALED;
			case PL_FORMAT_B8G8R8_UINT:
				return VK_FORMAT_B8G8R8_UINT;
			case PL_FORMAT_B8G8R8_SINT:
				return VK_FORMAT_B8G8R8_SINT;
			case PL_FORMAT_B8G8R8_SRGB:
				return VK_FORMAT_B8G8R8_SRGB;
			case PL_FORMAT_R8G8B8A8_UNORM:
				return VK_FORMAT_R8G8B8A8_UNORM;
			case PL_FORMAT_R8G8B8A8_SNORM:
				return VK_FORMAT_R8G8B8A8_SNORM;
			case PL_FORMAT_R8G8B8A8_USCALED:
				return VK_FORMAT_R8G8B8A8_USCALED;
			case PL_FORMAT_R8G8B8A8_SSCALED:
				return VK_FORMAT_R8G8B8A8_SSCALED;
			case PL_FORMAT_R8G8B8A8_UINT:
				return VK_FORMAT_R8G8B8A8_UINT;
			case PL_FORMAT_R8G8B8A8_SINT:
				return VK_FORMAT_R8G8B8A8_SINT;
			case PL_FORMAT_R8G8B8A8_SRGB:
				return VK_FORMAT_R8G8B8A8_SRGB;
			case PL_FORMAT_B8G8R8A8_UNORM:
				return VK_FORMAT_B8G8R8A8_UNORM;
			case PL_FORMAT_B8G8R8A8_SNORM:
				return VK_FORMAT_B8G8R8A8_SNORM;
			case PL_FORMAT_B8G8R8A8_USCALED:
				return VK_FORMAT_B8G8R8A8_USCALED;
			case PL_FORMAT_B8G8R8A8_SSCALED:
				return VK_FORMAT_B8G8R8A8_SSCALED;
			case PL_FORMAT_B8G8R8A8_UINT:
				return VK_FORMAT_B8G8R8A8_UINT;
			case PL_FORMAT_B8G8R8A8_SINT:
				return VK_FORMAT_B8G8R8A8_SINT;
			case PL_FORMAT_B8G8R8A8_SRGB:
				return VK_FORMAT_B8G8R8A8_SRGB;
			case PL_FORMAT_A8B8G8R8_UNORM_PACK32:
				return VK_FORMAT_A8B8G8R8_UNORM_PACK32;
			case PL_FORMAT_A8B8G8R8_SNORM_PACK32:
				return VK_FORMAT_A8B8G8R8_SNORM_PACK32;
			case PL_FORMAT_A8B8G8R8_USCALED_PACK32:
				return VK_FORMAT_A8B8G8R8_USCALED_PACK32;
			case PL_FORMAT_A8B8G8R8_SSCALED_PACK32:
				return VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
			case PL_FORMAT_A8B8G8R8_UINT_PACK32:
				return VK_FORMAT_A8B8G8R8_UINT_PACK32;
			case PL_FORMAT_A8B8G8R8_SINT_PACK32:
				return VK_FORMAT_A8B8G8R8_SINT_PACK32;
			case PL_FORMAT_A8B8G8R8_SRGB_PACK32:
				return VK_FORMAT_A8B8G8R8_SRGB_PACK32;
			case PL_FORMAT_A2R10G10B10_UNORM_PACK32:
				return VK_FORMAT_A2R10G10B10_UNORM_PACK32;
			case PL_FORMAT_A2R10G10B10_SNORM_PACK32:
				return VK_FORMAT_A2R10G10B10_SNORM_PACK32;
			case PL_FORMAT_A2R10G10B10_USCALED_PACK32:
				return VK_FORMAT_A2R10G10B10_USCALED_PACK32;
			case PL_FORMAT_A2R10G10B10_SSCALED_PACK32:
				return VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
			case PL_FORMAT_A2R10G10B10_UINT_PACK32:
				return VK_FORMAT_A2R10G10B10_UINT_PACK32;
			case PL_FORMAT_A2R10G10B10_SINT_PACK32:
				return VK_FORMAT_A2R10G10B10_SINT_PACK32;
			case PL_FORMAT_A2B10G10R10_UNORM_PACK32:
				return VK_FORMAT_A2B10G10R10_UNORM_PACK32;
			case PL_FORMAT_A2B10G10R10_SNORM_PACK32:
				return VK_FORMAT_A2B10G10R10_SNORM_PACK32;
			case PL_FORMAT_A2B10G10R10_USCALED_PACK32:
				return VK_FORMAT_A2B10G10R10_USCALED_PACK32;
			case PL_FORMAT_A2B10G10R10_SSCALED_PACK32:
				return VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
			case PL_FORMAT_A2B10G10R10_UINT_PACK32:
				return VK_FORMAT_A2B10G10R10_UINT_PACK32;
			case PL_FORMAT_A2B10G10R10_SINT_PACK32:
				return VK_FORMAT_A2B10G10R10_SINT_PACK32;
			case PL_FORMAT_R16_UNORM:
				return VK_FORMAT_R16_UNORM;
			case PL_FORMAT_R16_SNORM:
				return VK_FORMAT_R16_SNORM;
			case PL_FORMAT_R16_USCALED:
				return VK_FORMAT_R16_USCALED;
			case PL_FORMAT_R16_SSCALED:
				return VK_FORMAT_R16_SSCALED;
			case PL_FORMAT_R16_UINT:
				return VK_FORMAT_R16_UINT;
			case PL_FORMAT_R16_SINT:
				return VK_FORMAT_R16_SINT;
			case PL_FORMAT_R16_SFLOAT:
				return VK_FORMAT_R16_SFLOAT;
			case PL_FORMAT_R16G16_UNORM:
				return VK_FORMAT_R16G16_UNORM;
			case PL_FORMAT_R16G16_SNORM:
				return VK_FORMAT_R16G16_SNORM;
			case PL_FORMAT_R16G16_USCALED:
				return VK_FORMAT_R16G16_USCALED;
			case PL_FORMAT_R16G16_SSCALED:
				return VK_FORMAT_R16G16_SSCALED;
			case PL_FORMAT_R16G16_UINT:
				return VK_FORMAT_R16G16_UINT;
			case PL_FORMAT_R16G16_SINT:
				return VK_FORMAT_R16G16_SINT;
			case PL_FORMAT_R16G16_SFLOAT:
				return VK_FORMAT_R16G16_SFLOAT;
			case PL_FORMAT_R16G16B16_UNORM:
				return VK_FORMAT_R16G16B16_UNORM;
			case PL_FORMAT_R16G16B16_SNORM:
				return VK_FORMAT_R16G16B16_SNORM;
			case PL_FORMAT_R16G16B16_USCALED:
				return VK_FORMAT_R16G16B16_USCALED;
			case PL_FORMAT_R16G16B16_SSCALED:
				return VK_FORMAT_R16G16B16_SSCALED;
			case PL_FORMAT_R16G16B16_UINT:
				return VK_FORMAT_R16G16B16_UINT;
			case PL_FORMAT_R16G16B16_SINT:
				return VK_FORMAT_R16G16B16_SINT;
			case PL_FORMAT_R16G16B16_SFLOAT:
				return VK_FORMAT_R16G16B16_SFLOAT;
			case PL_FORMAT_R16G16B16A16_UNORM:
				return VK_FORMAT_R16G16B16A16_UNORM;
			case PL_FORMAT_R16G16B16A16_SNORM:
				return VK_FORMAT_R16G16B16A16_SNORM;
			case PL_FORMAT_R16G16B16A16_USCALED:
				return VK_FORMAT_R16G16B16A16_USCALED;
			case PL_FORMAT_R16G16B16A16_SSCALED:
				return VK_FORMAT_R16G16B16A16_SSCALED;
			case PL_FORMAT_R16G16B16A16_UINT:
				return VK_FORMAT_R16G16B16A16_UINT;
			case PL_FORMAT_R16G16B16A16_SINT:
				return VK_FORMAT_R16G16B16A16_SINT;
			case PL_FORMAT_R16G16B16A16_SFLOAT:
				return VK_FORMAT_R16G16B16A16_SFLOAT;
			case PL_FORMAT_R32_UINT:
				return VK_FORMAT_R32_UINT;
			case PL_FORMAT_R32_SINT:
				return VK_FORMAT_R32_SINT;
			case PL_FORMAT_R32_SFLOAT:
				return VK_FORMAT_R32_SFLOAT;
			case PL_FORMAT_R32G32_UINT:
				return VK_FORMAT_R32G32_UINT;
			case PL_FORMAT_R32G32_SINT:
				return VK_FORMAT_R32G32_SINT;
			case PL_FORMAT_R32G32_SFLOAT:
				return VK_FORMAT_R32G32_SFLOAT;
			case PL_FORMAT_R32G32B32_UINT:
				return VK_FORMAT_R32G32B32_UINT;
			case PL_FORMAT_R32G32B32_SINT:
				return VK_FORMAT_R32G32B32_SINT;
			case PL_FORMAT_R32G32B32_SFLOAT:
				return VK_FORMAT_R32G32B32_SFLOAT;
			case PL_FORMAT_R32G32B32A32_UINT:
				return VK_FORMAT_R32G32B32A32_UINT;
			case PL_FORMAT_R32G32B32A32_SINT:
				return VK_FORMAT_R32G32B32A32_SINT;
			case PL_FORMAT_R32G32B32A32_SFLOAT:
				return VK_FORMAT_R32G32B32A32_SFLOAT;
			case PL_FORMAT_R64_UINT:
				return VK_FORMAT_R64_UINT;
			case PL_FORMAT_R64_SINT:
				return VK_FORMAT_R64_SINT;
			case PL_FORMAT_R64_SFLOAT:
				return VK_FORMAT_R64_SFLOAT;
			case PL_FORMAT_R64G64_UINT:
				return VK_FORMAT_R64G64_UINT;
			case PL_FORMAT_R64G64_SINT:
				return VK_FORMAT_R64G64_SINT;
			case PL_FORMAT_R64G64_SFLOAT:
				return VK_FORMAT_R64G64_SFLOAT;
			case PL_FORMAT_R64G64B64_UINT:
				return VK_FORMAT_R64G64B64_UINT;
			case PL_FORMAT_R64G64B64_SINT:
				return VK_FORMAT_R64G64B64_SINT;
			case PL_FORMAT_R64G64B64_SFLOAT:
				return VK_FORMAT_R64G64B64_SFLOAT;
			case PL_FORMAT_R64G64B64A64_UINT:
				return VK_FORMAT_R64G64B64A64_UINT;
			case PL_FORMAT_R64G64B64A64_SINT:
				return VK_FORMAT_R64G64B64A64_SINT;
			case PL_FORMAT_R64G64B64A64_SFLOAT:
				return VK_FORMAT_R64G64B64A64_SFLOAT;
			case PL_FORMAT_B10G11R11_UFLOAT_PACK32:
				return VK_FORMAT_B10G11R11_UFLOAT_PACK32;
			case PL_FORMAT_E5B9G9R9_UFLOAT_PACK32:
				return VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
			case PL_FORMAT_D16_UNORM:
				return VK_FORMAT_D16_UNORM;
			case PL_FORMAT_X8_D24_UNORM_PACK32:
				return VK_FORMAT_X8_D24_UNORM_PACK32;
			case PL_FORMAT_D32_SFLOAT:
				return VK_FORMAT_D32_SFLOAT;
			case PL_FORMAT_S8_UINT:
				return VK_FORMAT_S8_UINT;
			case PL_FORMAT_D16_UNORM_S8_UINT:
				return VK_FORMAT_D16_UNORM_S8_UINT;
			case PL_FORMAT_D24_UNORM_S8_UINT:
				return VK_FORMAT_D24_UNORM_S8_UINT;
			case PL_FORMAT_D32_SFLOAT_S8_UINT:
				return VK_FORMAT_D32_SFLOAT_S8_UINT;
			case PL_FORMAT_BC1_RGB_UNORM_BLOCK:
				return VK_FORMAT_BC1_RGB_UNORM_BLOCK;
			case PL_FORMAT_BC1_RGB_SRGB_BLOCK:
				return VK_FORMAT_BC1_RGB_SRGB_BLOCK;
			case PL_FORMAT_BC1_RGBA_UNORM_BLOCK:
				return VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
			case PL_FORMAT_BC1_RGBA_SRGB_BLOCK:
				return VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
			case PL_FORMAT_BC2_UNORM_BLOCK:
				return VK_FORMAT_BC2_UNORM_BLOCK;
			case PL_FORMAT_BC2_SRGB_BLOCK:
				return VK_FORMAT_BC2_SRGB_BLOCK;
			case PL_FORMAT_BC3_UNORM_BLOCK:
				return VK_FORMAT_BC3_UNORM_BLOCK;
			case PL_FORMAT_BC3_SRGB_BLOCK:
				return VK_FORMAT_BC3_SRGB_BLOCK;
			case PL_FORMAT_BC4_UNORM_BLOCK:
				return VK_FORMAT_BC4_UNORM_BLOCK;
			case PL_FORMAT_BC4_SNORM_BLOCK:
				return VK_FORMAT_BC4_SNORM_BLOCK;
			case PL_FORMAT_BC5_UNORM_BLOCK:
				return VK_FORMAT_BC5_UNORM_BLOCK;
			case PL_FORMAT_BC5_SNORM_BLOCK:
				return VK_FORMAT_BC5_SNORM_BLOCK;
			case PL_FORMAT_BC6H_UFLOAT_BLOCK:
				return VK_FORMAT_BC6H_UFLOAT_BLOCK;
			case PL_FORMAT_BC6H_SFLOAT_BLOCK:
				return VK_FORMAT_BC6H_SFLOAT_BLOCK;
			case PL_FORMAT_BC7_UNORM_BLOCK:
				return VK_FORMAT_BC7_UNORM_BLOCK;
			case PL_FORMAT_BC7_SRGB_BLOCK:
				return VK_FORMAT_BC7_SRGB_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
			case PL_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
				return VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
			case PL_FORMAT_EAC_R11_UNORM_BLOCK:
				return VK_FORMAT_EAC_R11_UNORM_BLOCK;
			case PL_FORMAT_EAC_R11_SNORM_BLOCK:
				return VK_FORMAT_EAC_R11_SNORM_BLOCK;
			case PL_FORMAT_EAC_R11G11_UNORM_BLOCK:
				return VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
			case PL_FORMAT_EAC_R11G11_SNORM_BLOCK:
				return VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
			case PL_FORMAT_ASTC_4x4_UNORM_BLOCK:
				return VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
			case PL_FORMAT_ASTC_4x4_SRGB_BLOCK:
				return VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
			case PL_FORMAT_ASTC_5x4_UNORM_BLOCK:
				return VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
			case PL_FORMAT_ASTC_5x4_SRGB_BLOCK:
				return VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
			case PL_FORMAT_ASTC_5x5_UNORM_BLOCK:
				return VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
			case PL_FORMAT_ASTC_5x5_SRGB_BLOCK:
				return VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
			case PL_FORMAT_ASTC_6x5_UNORM_BLOCK:
				return VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
			case PL_FORMAT_ASTC_6x5_SRGB_BLOCK:
				return VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
			case PL_FORMAT_ASTC_6x6_UNORM_BLOCK:
				return VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
			case PL_FORMAT_ASTC_6x6_SRGB_BLOCK:
				return VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
			case PL_FORMAT_ASTC_8x5_UNORM_BLOCK:
				return VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
			case PL_FORMAT_ASTC_8x5_SRGB_BLOCK:
				return VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
			case PL_FORMAT_ASTC_8x6_UNORM_BLOCK:
				return VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
			case PL_FORMAT_ASTC_8x6_SRGB_BLOCK:
				return VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
			case PL_FORMAT_ASTC_8x8_UNORM_BLOCK:
				return VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
			case PL_FORMAT_ASTC_8x8_SRGB_BLOCK:
				return VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
			case PL_FORMAT_ASTC_10x5_UNORM_BLOCK:
				return VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
			case PL_FORMAT_ASTC_10x5_SRGB_BLOCK:
				return VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
			case PL_FORMAT_ASTC_10x6_UNORM_BLOCK:
				return VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
			case PL_FORMAT_ASTC_10x6_SRGB_BLOCK:
				return VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
			case PL_FORMAT_ASTC_10x8_UNORM_BLOCK:
				return VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
			case PL_FORMAT_ASTC_10x8_SRGB_BLOCK:
				return VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
			case PL_FORMAT_ASTC_10x10_UNORM_BLOCK:
				return VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
			case PL_FORMAT_ASTC_10x10_SRGB_BLOCK:
				return VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
			case PL_FORMAT_ASTC_12x10_UNORM_BLOCK:
				return VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
			case PL_FORMAT_ASTC_12x10_SRGB_BLOCK:
				return VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
			case PL_FORMAT_ASTC_12x12_UNORM_BLOCK:
				return VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
			case PL_FORMAT_ASTC_12x12_SRGB_BLOCK:
				return VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
			default:
				return VK_FORMAT_UNDEFINED;
		}
	}

	static PlTextureFormat VkFormatToPlImageFormat(VkFormat format) {
		switch (format) {
			case VK_FORMAT_UNDEFINED:
				return PL_FORMAT_UNDEFINED;
			case VK_FORMAT_R4G4_UNORM_PACK8:
				return PL_FORMAT_R4G4_UNORM_PACK8;
			case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
				return PL_FORMAT_R4G4B4A4_UNORM_PACK16;
			case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
				return PL_FORMAT_B4G4R4A4_UNORM_PACK16;
			case VK_FORMAT_R5G6B5_UNORM_PACK16:
				return PL_FORMAT_R5G6B5_UNORM_PACK16;
			case VK_FORMAT_B5G6R5_UNORM_PACK16:
				return PL_FORMAT_B5G6R5_UNORM_PACK16;
			case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
				return PL_FORMAT_R5G5B5A1_UNORM_PACK16;
			case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
				return PL_FORMAT_B5G5R5A1_UNORM_PACK16;
			case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
				return PL_FORMAT_A1R5G5B5_UNORM_PACK16;
			case VK_FORMAT_R8_UNORM:
				return PL_FORMAT_R8_UNORM;
			case VK_FORMAT_R8_SNORM:
				return PL_FORMAT_R8_SNORM;
			case VK_FORMAT_R8_USCALED:
				return PL_FORMAT_R8_USCALED;
			case VK_FORMAT_R8_SSCALED:
				return PL_FORMAT_R8_SSCALED;
			case VK_FORMAT_R8_UINT:
				return PL_FORMAT_R8_UINT;
			case VK_FORMAT_R8_SINT:
				return PL_FORMAT_R8_SINT;
			case VK_FORMAT_R8_SRGB:
				return PL_FORMAT_R8_SRGB;
			case VK_FORMAT_R8G8_UNORM:
				return PL_FORMAT_R8G8_UNORM;
			case VK_FORMAT_R8G8_SNORM:
				return PL_FORMAT_R8G8_SNORM;
			case VK_FORMAT_R8G8_USCALED:
				return PL_FORMAT_R8G8_USCALED;
			case VK_FORMAT_R8G8_SSCALED:
				return PL_FORMAT_R8G8_SSCALED;
			case VK_FORMAT_R8G8_UINT:
				return PL_FORMAT_R8G8_UINT;
			case VK_FORMAT_R8G8_SINT:
				return PL_FORMAT_R8G8_SINT;
			case VK_FORMAT_R8G8_SRGB:
				return PL_FORMAT_R8G8_SRGB;
			case VK_FORMAT_R8G8B8_UNORM:
				return PL_FORMAT_R8G8B8_UNORM;
			case VK_FORMAT_R8G8B8_SNORM:
				return PL_FORMAT_R8G8B8_SNORM;
			case VK_FORMAT_R8G8B8_USCALED:
				return PL_FORMAT_R8G8B8_USCALED;
			case VK_FORMAT_R8G8B8_SSCALED:
				return PL_FORMAT_R8G8B8_SSCALED;
			case VK_FORMAT_R8G8B8_UINT:
				return PL_FORMAT_R8G8B8_UINT;
			case VK_FORMAT_R8G8B8_SINT:
				return PL_FORMAT_R8G8B8_SINT;
			case VK_FORMAT_R8G8B8_SRGB:
				return PL_FORMAT_R8G8B8_SRGB;
			case VK_FORMAT_B8G8R8_UNORM:
				return PL_FORMAT_B8G8R8_UNORM;
			case VK_FORMAT_B8G8R8_SNORM:
				return PL_FORMAT_B8G8R8_SNORM;
			case VK_FORMAT_B8G8R8_USCALED:
				return PL_FORMAT_B8G8R8_USCALED;
			case VK_FORMAT_B8G8R8_SSCALED:
				return PL_FORMAT_B8G8R8_SSCALED;
			case VK_FORMAT_B8G8R8_UINT:
				return PL_FORMAT_B8G8R8_UINT;
			case VK_FORMAT_B8G8R8_SINT:
				return PL_FORMAT_B8G8R8_SINT;
			case VK_FORMAT_B8G8R8_SRGB:
				return PL_FORMAT_B8G8R8_SRGB;
			case VK_FORMAT_R8G8B8A8_UNORM:
				return PL_FORMAT_R8G8B8A8_UNORM;
			case VK_FORMAT_R8G8B8A8_SNORM:
				return PL_FORMAT_R8G8B8A8_SNORM;
			case VK_FORMAT_R8G8B8A8_USCALED:
				return PL_FORMAT_R8G8B8A8_USCALED;
			case VK_FORMAT_R8G8B8A8_SSCALED:
				return PL_FORMAT_R8G8B8A8_SSCALED;
			case VK_FORMAT_R8G8B8A8_UINT:
				return PL_FORMAT_R8G8B8A8_UINT;
			case VK_FORMAT_R8G8B8A8_SINT:
				return PL_FORMAT_R8G8B8A8_SINT;
			case VK_FORMAT_R8G8B8A8_SRGB:
				return PL_FORMAT_R8G8B8A8_SRGB;
			case VK_FORMAT_B8G8R8A8_UNORM:
				return PL_FORMAT_B8G8R8A8_UNORM;
			case VK_FORMAT_B8G8R8A8_SNORM:
				return PL_FORMAT_B8G8R8A8_SNORM;
			case VK_FORMAT_B8G8R8A8_USCALED:
				return PL_FORMAT_B8G8R8A8_USCALED;
			case VK_FORMAT_B8G8R8A8_SSCALED:
				return PL_FORMAT_B8G8R8A8_SSCALED;
			case VK_FORMAT_B8G8R8A8_UINT:
				return PL_FORMAT_B8G8R8A8_UINT;
			case VK_FORMAT_B8G8R8A8_SINT:
				return PL_FORMAT_B8G8R8A8_SINT;
			case VK_FORMAT_B8G8R8A8_SRGB:
				return PL_FORMAT_B8G8R8A8_SRGB;
			case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
				return PL_FORMAT_A8B8G8R8_UNORM_PACK32;
			case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
				return PL_FORMAT_A8B8G8R8_SNORM_PACK32;
			case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
				return PL_FORMAT_A8B8G8R8_USCALED_PACK32;
			case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
				return PL_FORMAT_A8B8G8R8_SSCALED_PACK32;
			case VK_FORMAT_A8B8G8R8_UINT_PACK32:
				return PL_FORMAT_A8B8G8R8_UINT_PACK32;
			case VK_FORMAT_A8B8G8R8_SINT_PACK32:
				return PL_FORMAT_A8B8G8R8_SINT_PACK32;
			case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
				return PL_FORMAT_A8B8G8R8_SRGB_PACK32;
			case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
				return PL_FORMAT_A2R10G10B10_UNORM_PACK32;
			case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
				return PL_FORMAT_A2R10G10B10_SNORM_PACK32;
			case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
				return PL_FORMAT_A2R10G10B10_USCALED_PACK32;
			case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
				return PL_FORMAT_A2R10G10B10_SSCALED_PACK32;
			case VK_FORMAT_A2R10G10B10_UINT_PACK32:
				return PL_FORMAT_A2R10G10B10_UINT_PACK32;
			case VK_FORMAT_A2R10G10B10_SINT_PACK32:
				return PL_FORMAT_A2R10G10B10_SINT_PACK32;
			case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
				return PL_FORMAT_A2B10G10R10_UNORM_PACK32;
			case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
				return PL_FORMAT_A2B10G10R10_SNORM_PACK32;
			case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
				return PL_FORMAT_A2B10G10R10_USCALED_PACK32;
			case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
				return PL_FORMAT_A2B10G10R10_SSCALED_PACK32;
			case VK_FORMAT_A2B10G10R10_UINT_PACK32:
				return PL_FORMAT_A2B10G10R10_UINT_PACK32;
			case VK_FORMAT_A2B10G10R10_SINT_PACK32:
				return PL_FORMAT_A2B10G10R10_SINT_PACK32;
			case VK_FORMAT_R16_UNORM:
				return PL_FORMAT_R16_UNORM;
			case VK_FORMAT_R16_SNORM:
				return PL_FORMAT_R16_SNORM;
			case VK_FORMAT_R16_USCALED:
				return PL_FORMAT_R16_USCALED;
			case VK_FORMAT_R16_SSCALED:
				return PL_FORMAT_R16_SSCALED;
			case VK_FORMAT_R16_UINT:
				return PL_FORMAT_R16_UINT;
			case VK_FORMAT_R16_SINT:
				return PL_FORMAT_R16_SINT;
			case VK_FORMAT_R16_SFLOAT:
				return PL_FORMAT_R16_SFLOAT;
			case VK_FORMAT_R16G16_UNORM:
				return PL_FORMAT_R16G16_UNORM;
			case VK_FORMAT_R16G16_SNORM:
				return PL_FORMAT_R16G16_SNORM;
			case VK_FORMAT_R16G16_USCALED:
				return PL_FORMAT_R16G16_USCALED;
			case VK_FORMAT_R16G16_SSCALED:
				return PL_FORMAT_R16G16_SSCALED;
			case VK_FORMAT_R16G16_UINT:
				return PL_FORMAT_R16G16_UINT;
			case VK_FORMAT_R16G16_SINT:
				return PL_FORMAT_R16G16_SINT;
			case VK_FORMAT_R16G16_SFLOAT:
				return PL_FORMAT_R16G16_SFLOAT;
			case VK_FORMAT_R16G16B16_UNORM:
				return PL_FORMAT_R16G16B16_UNORM;
			case VK_FORMAT_R16G16B16_SNORM:
				return PL_FORMAT_R16G16B16_SNORM;
			case VK_FORMAT_R16G16B16_USCALED:
				return PL_FORMAT_R16G16B16_USCALED;
			case VK_FORMAT_R16G16B16_SSCALED:
				return PL_FORMAT_R16G16B16_SSCALED;
			case VK_FORMAT_R16G16B16_UINT:
				return PL_FORMAT_R16G16B16_UINT;
			case VK_FORMAT_R16G16B16_SINT:
				return PL_FORMAT_R16G16B16_SINT;
			case VK_FORMAT_R16G16B16_SFLOAT:
				return PL_FORMAT_R16G16B16_SFLOAT;
			case VK_FORMAT_R16G16B16A16_UNORM:
				return PL_FORMAT_R16G16B16A16_UNORM;
			case VK_FORMAT_R16G16B16A16_SNORM:
				return PL_FORMAT_R16G16B16A16_SNORM;
			case VK_FORMAT_R16G16B16A16_USCALED:
				return PL_FORMAT_R16G16B16A16_USCALED;
			case VK_FORMAT_R16G16B16A16_SSCALED:
				return PL_FORMAT_R16G16B16A16_SSCALED;
			case VK_FORMAT_R16G16B16A16_UINT:
				return PL_FORMAT_R16G16B16A16_UINT;
			case VK_FORMAT_R16G16B16A16_SINT:
				return PL_FORMAT_R16G16B16A16_SINT;
			case VK_FORMAT_R16G16B16A16_SFLOAT:
				return PL_FORMAT_R16G16B16A16_SFLOAT;
			case VK_FORMAT_R32_UINT:
				return PL_FORMAT_R32_UINT;
			case VK_FORMAT_R32_SINT:
				return PL_FORMAT_R32_SINT;
			case VK_FORMAT_R32_SFLOAT:
				return PL_FORMAT_R32_SFLOAT;
			case VK_FORMAT_R32G32_UINT:
				return PL_FORMAT_R32G32_UINT;
			case VK_FORMAT_R32G32_SINT:
				return PL_FORMAT_R32G32_SINT;
			case VK_FORMAT_R32G32_SFLOAT:
				return PL_FORMAT_R32G32_SFLOAT;
			case VK_FORMAT_R32G32B32_UINT:
				return PL_FORMAT_R32G32B32_UINT;
			case VK_FORMAT_R32G32B32_SINT:
				return PL_FORMAT_R32G32B32_SINT;
			case VK_FORMAT_R32G32B32_SFLOAT:
				return PL_FORMAT_R32G32B32_SFLOAT;
			case VK_FORMAT_R32G32B32A32_UINT:
				return PL_FORMAT_R32G32B32A32_UINT;
			case VK_FORMAT_R32G32B32A32_SINT:
				return PL_FORMAT_R32G32B32A32_SINT;
			case VK_FORMAT_R32G32B32A32_SFLOAT:
				return PL_FORMAT_R32G32B32A32_SFLOAT;
			case VK_FORMAT_R64_UINT:
				return PL_FORMAT_R64_UINT;
			case VK_FORMAT_R64_SINT:
				return PL_FORMAT_R64_SINT;
			case VK_FORMAT_R64_SFLOAT:
				return PL_FORMAT_R64_SFLOAT;
			case VK_FORMAT_R64G64_UINT:
				return PL_FORMAT_R64G64_UINT;
			case VK_FORMAT_R64G64_SINT:
				return PL_FORMAT_R64G64_SINT;
			case VK_FORMAT_R64G64_SFLOAT:
				return PL_FORMAT_R64G64_SFLOAT;
			case VK_FORMAT_R64G64B64_UINT:
				return PL_FORMAT_R64G64B64_UINT;
			case VK_FORMAT_R64G64B64_SINT:
				return PL_FORMAT_R64G64B64_SINT;
			case VK_FORMAT_R64G64B64_SFLOAT:
				return PL_FORMAT_R64G64B64_SFLOAT;
			case VK_FORMAT_R64G64B64A64_UINT:
				return PL_FORMAT_R64G64B64A64_UINT;
			case VK_FORMAT_R64G64B64A64_SINT:
				return PL_FORMAT_R64G64B64A64_SINT;
			case VK_FORMAT_R64G64B64A64_SFLOAT:
				return PL_FORMAT_R64G64B64A64_SFLOAT;
			case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
				return PL_FORMAT_B10G11R11_UFLOAT_PACK32;
			case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
				return PL_FORMAT_E5B9G9R9_UFLOAT_PACK32;
			case VK_FORMAT_D16_UNORM:
				return PL_FORMAT_D16_UNORM;
			case VK_FORMAT_X8_D24_UNORM_PACK32:
				return PL_FORMAT_X8_D24_UNORM_PACK32;
			case VK_FORMAT_D32_SFLOAT:
				return PL_FORMAT_D32_SFLOAT;
			case VK_FORMAT_S8_UINT:
				return PL_FORMAT_S8_UINT;
			case VK_FORMAT_D16_UNORM_S8_UINT:
				return PL_FORMAT_D16_UNORM_S8_UINT;
			case VK_FORMAT_D24_UNORM_S8_UINT:
				return PL_FORMAT_D24_UNORM_S8_UINT;
			case VK_FORMAT_D32_SFLOAT_S8_UINT:
				return PL_FORMAT_D32_SFLOAT_S8_UINT;
			case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
				return PL_FORMAT_BC1_RGB_UNORM_BLOCK;
			case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
				return PL_FORMAT_BC1_RGB_SRGB_BLOCK;
			case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
				return PL_FORMAT_BC1_RGBA_UNORM_BLOCK;
			case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
				return PL_FORMAT_BC1_RGBA_SRGB_BLOCK;
			case VK_FORMAT_BC2_UNORM_BLOCK:
				return PL_FORMAT_BC2_UNORM_BLOCK;
			case VK_FORMAT_BC2_SRGB_BLOCK:
				return PL_FORMAT_BC2_SRGB_BLOCK;
			case VK_FORMAT_BC3_UNORM_BLOCK:
				return PL_FORMAT_BC3_UNORM_BLOCK;
			case VK_FORMAT_BC3_SRGB_BLOCK:
				return PL_FORMAT_BC3_SRGB_BLOCK;
			case VK_FORMAT_BC4_UNORM_BLOCK:
				return PL_FORMAT_BC4_UNORM_BLOCK;
			case VK_FORMAT_BC4_SNORM_BLOCK:
				return PL_FORMAT_BC4_SNORM_BLOCK;
			case VK_FORMAT_BC5_UNORM_BLOCK:
				return PL_FORMAT_BC5_UNORM_BLOCK;
			case VK_FORMAT_BC5_SNORM_BLOCK:
				return PL_FORMAT_BC5_SNORM_BLOCK;
			case VK_FORMAT_BC6H_UFLOAT_BLOCK:
				return PL_FORMAT_BC6H_UFLOAT_BLOCK;
			case VK_FORMAT_BC6H_SFLOAT_BLOCK:
				return PL_FORMAT_BC6H_SFLOAT_BLOCK;
			case VK_FORMAT_BC7_UNORM_BLOCK:
				return PL_FORMAT_BC7_UNORM_BLOCK;
			case VK_FORMAT_BC7_SRGB_BLOCK:
				return PL_FORMAT_BC7_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
			case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
				return PL_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
			case VK_FORMAT_EAC_R11_UNORM_BLOCK:
				return PL_FORMAT_EAC_R11_UNORM_BLOCK;
			case VK_FORMAT_EAC_R11_SNORM_BLOCK:
				return PL_FORMAT_EAC_R11_SNORM_BLOCK;
			case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
				return PL_FORMAT_EAC_R11G11_UNORM_BLOCK;
			case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
				return PL_FORMAT_EAC_R11G11_SNORM_BLOCK;
			case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
				return PL_FORMAT_ASTC_4x4_UNORM_BLOCK;
			case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
				return PL_FORMAT_ASTC_4x4_SRGB_BLOCK;
			case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
				return PL_FORMAT_ASTC_5x4_UNORM_BLOCK;
			case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
				return PL_FORMAT_ASTC_5x4_SRGB_BLOCK;
			case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
				return PL_FORMAT_ASTC_5x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
				return PL_FORMAT_ASTC_5x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
				return PL_FORMAT_ASTC_6x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
				return PL_FORMAT_ASTC_6x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
				return PL_FORMAT_ASTC_6x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
				return PL_FORMAT_ASTC_6x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
				return PL_FORMAT_ASTC_8x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
				return PL_FORMAT_ASTC_8x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
				return PL_FORMAT_ASTC_8x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
				return PL_FORMAT_ASTC_8x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
				return PL_FORMAT_ASTC_8x8_UNORM_BLOCK;
			case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
				return PL_FORMAT_ASTC_8x8_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
				return PL_FORMAT_ASTC_10x5_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
				return PL_FORMAT_ASTC_10x5_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
				return PL_FORMAT_ASTC_10x6_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
				return PL_FORMAT_ASTC_10x6_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
				return PL_FORMAT_ASTC_10x8_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
				return PL_FORMAT_ASTC_10x8_SRGB_BLOCK;
			case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
				return PL_FORMAT_ASTC_10x10_UNORM_BLOCK;
			case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
				return PL_FORMAT_ASTC_10x10_SRGB_BLOCK;
			case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
				return PL_FORMAT_ASTC_12x10_UNORM_BLOCK;
			case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
				return PL_FORMAT_ASTC_12x10_SRGB_BLOCK;
			case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
				return PL_FORMAT_ASTC_12x12_UNORM_BLOCK;
			case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
				return PL_FORMAT_ASTC_12x12_SRGB_BLOCK;
			default:
				return PL_FORMAT_UNDEFINED;
		}
	}

	static VkImageUsageFlags PlImageUsageToVkImageUsage(PlImageUsage imageUsage) {
		VkImageUsageFlags convertedUsage = 0;
		if (imageUsage & PL_IMAGE_USAGE_TRANSFER_SRC)
			convertedUsage |= VK_IMAGE_USAGE_TRANSFER_SRC_BIT;
		if (imageUsage & PL_IMAGE_USAGE_TRANSFER_DST)
			convertedUsage |= VK_IMAGE_USAGE_TRANSFER_DST_BIT;
		if (imageUsage & PL_IMAGE_USAGE_SAMPLED)
			convertedUsage |= VK_IMAGE_USAGE_SAMPLED_BIT;
		if (imageUsage & PL_IMAGE_USAGE_STORAGE)
			convertedUsage |= VK_IMAGE_USAGE_STORAGE_BIT;
		if (imageUsage & PL_IMAGE_USAGE_COLOR_ATTACHMENT)
			convertedUsage |= VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
		if (imageUsage & PL_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT)
			convertedUsage |= VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
		if (imageUsage & PL_IMAGE_USAGE_INPUT_ATTACHMENT)
			convertedUsage |= VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT;
		return convertedUsage;
	}

	static VkShaderStageFlags PlRenderStageToVkShaderStage(PlRenderStage stage) {
		VkShaderStageFlags newStage{};
		if (stage & PL_STAGE_ALL)
			newStage = VK_SHADER_STAGE_ALL;
		if (stage & PL_STAGE_VERTEX)
			newStage |= VK_SHADER_STAGE_VERTEX_BIT;
		if (stage & PL_STAGE_FRAGMENT)
			newStage |= VK_SHADER_STAGE_FRAGMENT_BIT;
		if (stage & PL_STAGE_GEOMETRY)
			newStage |= VK_SHADER_STAGE_GEOMETRY_BIT;
		if (stage & PL_STAGE_COMPUTE)
			newStage |= VK_SHADER_STAGE_COMPUTE_BIT;
		return newStage;
	}

	static VkMemoryPropertyFlags PlMemoryPropertyToVkMemoryProperty(PlMemoryProperty memoryProperties) {
		VkMemoryPropertyFlags convertedPropertyFlags = 0;

		if (memoryProperties & PL_MEMORY_PROPERTY_DEVICE_LOCAL) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;
		}
		if (memoryProperties & PL_MEMORY_PROPERTY_HOST_VISIBLE) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;
		}
		if (memoryProperties & PL_MEMORY_PROPERTY_HOST_COHERENT) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
		}
		if (memoryProperties & PL_MEMORY_PROPERTY_HOST_CACHED) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_HOST_CACHED_BIT;
		}
		if (memoryProperties & PL_MEMORY_PROPERTY_LAZILY_ALLOCATED) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT;
		}
		if (memoryProperties & PL_MEMORY_PROPERTY_PROTECTED) {
			convertedPropertyFlags |= VK_MEMORY_PROPERTY_PROTECTED_BIT;
		}

		return convertedPropertyFlags;
	}

	static VkBufferUsageFlags PlBufferUsageToVkBufferUsage(PlBufferUsage usage) {
		VkBufferUsageFlags convertedUsage{};
		if (usage & PL_BUFFER_USAGE_TRANSFER_SRC) {
			convertedUsage |= VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
		}
		if (usage & PL_BUFFER_USAGE_TRANSFER_DST) {
			convertedUsage |= VK_BUFFER_USAGE_TRANSFER_DST_BIT;
		}
		if (usage & PL_BUFFER_USAGE_UNIFORM_BUFFER) {
			convertedUsage |= VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;
		}
		if (usage & PL_BUFFER_USAGE_STORAGE_BUFFER) {
			convertedUsage |= VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
		}
		if (usage & PL_BUFFER_USAGE_INDEX_BUFFER) {
			convertedUsage |= VK_BUFFER_USAGE_INDEX_BUFFER_BIT;
		}
		if (usage & PL_BUFFER_USAGE_VERTEX_BUFFER) {
			convertedUsage |= VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
		}
		if (usage & PL_BUFFER_USAGE_INDIRECT_BUFFER) {
			convertedUsage |= VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT;
		}
		return convertedUsage;
	}

	static VmaMemoryUsage PlMemoryUsageToVmaMemoryUsage(PlMemoryUsage usage) {
		VmaMemoryUsage convertedUsage = VMA_MEMORY_USAGE_UNKNOWN;
		switch (usage) {
			case PL_MEMORY_USAGE_GPU_ONLY:
				convertedUsage = VMA_MEMORY_USAGE_GPU_ONLY;
				break;
			case PL_MEMORY_USAGE_CPU_ONLY:
				convertedUsage = VMA_MEMORY_USAGE_CPU_ONLY;
				break;
			case PL_MEMORY_USAGE_CPU_TO_GPU:
				convertedUsage = VMA_MEMORY_USAGE_CPU_TO_GPU;
				break;
			case PL_MEMORY_USAGE_GPU_TO_CPU:
				convertedUsage = VMA_MEMORY_USAGE_GPU_TO_CPU;
				break;
			case PL_MEMORY_USAGE_CPU_COPY:
				convertedUsage = VMA_MEMORY_USAGE_CPU_COPY;
				break;
			case PL_MEMORY_USAGE_GPU_LAZILY_ALLOCATED:
				convertedUsage = VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED;
				break;
			case PL_MEMORY_USAGE_AUTO:
				convertedUsage = VMA_MEMORY_USAGE_AUTO;
				break;
			case PL_MEMORY_USAGE_AUTO_PREFER_DEVICE:
				convertedUsage = VMA_MEMORY_USAGE_AUTO_PREFER_DEVICE;
				break;
			case PL_MEMORY_USAGE_AUTO_PREFER_HOST:
				convertedUsage = VMA_MEMORY_USAGE_AUTO_PREFER_HOST;
				break;
		}
		return convertedUsage;
	}

	static VkPrimitiveTopology PlTopologyToVkTopology(PlPrimitiveTopology topology) {
		switch (topology) {
			case PL_TOPOLOGY_TRIANGLE_LIST:
				return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
			case PL_TOPOLOGY_LINE_LIST:
				return VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
			case PL_TOPOLOGY_POINT_LIST:
				return VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
			case PL_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
				return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
			default:
				return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
		}
	}

	static VkPolygonMode PlPolygonModeToVkPolygonMode(PlPolygonMode mode) {
		switch (mode) {
			case PL_POLYGON_MODE_FILL:
				return VK_POLYGON_MODE_FILL;
			case PL_POLYGON_MODE_LINE:
				return VK_POLYGON_MODE_LINE;
			case PL_POLYGON_MODE_POINT:
				return VK_POLYGON_MODE_POINT;
			default:
				return VK_POLYGON_MODE_FILL;
		}
	}

	static VkCullModeFlags PlCullModeToVkCullMode(PlCullMode mode) {
		switch (mode) {
			case PL_CULL_MODE_NONE:
				return VK_CULL_MODE_NONE;
			case PL_CULL_MODE_FRONT:
				return VK_CULL_MODE_FRONT_BIT;
			case PL_CULL_MODE_BACK:
				return VK_CULL_MODE_BACK_BIT;
			case PL_CULL_MODE_FRONT_AND_BACK:
				return VK_CULL_MODE_FRONT_AND_BACK;
			default:
				return VK_CULL_MODE_BACK_BIT;
		}
	}

	static VkFrontFace PlFrontFaceToVkFrontFace(PlFrontFace face) {
		switch (face) {
			case PL_FRONT_FACE_COUNTER_CLOCKWISE:
				return VK_FRONT_FACE_COUNTER_CLOCKWISE;
			case PL_FRONT_FACE_CLOCKWISE:
				return VK_FRONT_FACE_CLOCKWISE;
			default:
				return VK_FRONT_FACE_COUNTER_CLOCKWISE;
		}
	}

	static VkSampleCountFlagBits PlSampleCountToVkSampleCount(PlSampleCount sampleCount) {
		switch (sampleCount) {
			case PL_SAMPLE_COUNT_1_BIT:
				return VK_SAMPLE_COUNT_1_BIT;
			case PL_SAMPLE_COUNT_2_BIT:
				return VK_SAMPLE_COUNT_2_BIT;
			case PL_SAMPLE_COUNT_4_BIT:
				return VK_SAMPLE_COUNT_4_BIT;
			case PL_SAMPLE_COUNT_8_BIT:
				return VK_SAMPLE_COUNT_8_BIT;
			case PL_SAMPLE_COUNT_16_BIT:
				return VK_SAMPLE_COUNT_16_BIT;
			case PL_SAMPLE_COUNT_32_BIT:
				return VK_SAMPLE_COUNT_32_BIT;
			case PL_SAMPLE_COUNT_64_BIT:
				return VK_SAMPLE_COUNT_64_BIT;
			default:
				return VK_SAMPLE_COUNT_1_BIT;
		}
	}

	static VkCompareOp PlCompareOpToVkCompareOp(PlCompareOp compareOp) {
		switch (compareOp) {
			case PL_COMPARE_OP_NEVER:
				return VK_COMPARE_OP_NEVER;
			case PL_COMPARE_OP_LESS:
				return VK_COMPARE_OP_LESS;
			case PL_COMPARE_OP_EQUAL:
				return VK_COMPARE_OP_EQUAL;
			case PL_COMPARE_OP_LESS_OR_EQUAL:
				return VK_COMPARE_OP_LESS_OR_EQUAL;
			case PL_COMPARE_OP_GREATER:
				return VK_COMPARE_OP_GREATER;
			case PL_COMPARE_OP_NOT_EQUAL:
				return VK_COMPARE_OP_NOT_EQUAL;
			case PL_COMPARE_OP_GREATER_OR_EQUAL:
				return VK_COMPARE_OP_GREATER_OR_EQUAL;
			case PL_COMPARE_OP_ALWAYS:
				return VK_COMPARE_OP_ALWAYS;
			default:
				return VK_COMPARE_OP_LESS_OR_EQUAL;
		}
	}

	static VkStencilOp PlStencilOpToVkStencilOp(PlStencilOp op) {
		switch (op) {
			case PL_STENCIL_OP_KEEP:
				return VK_STENCIL_OP_KEEP;
			case PL_STENCIL_OP_ZERO:
				return VK_STENCIL_OP_ZERO;
			case PL_STENCIL_OP_REPLACE:
				return VK_STENCIL_OP_REPLACE;
			case PL_STENCIL_OP_INCREMENT_AND_CLAMP:
				return VK_STENCIL_OP_INCREMENT_AND_CLAMP;
			case PL_STENCIL_OP_DECREMENT_AND_CLAMP:
				return VK_STENCIL_OP_DECREMENT_AND_CLAMP;
			case PL_STENCIL_OP_INVERT:
				return VK_STENCIL_OP_INVERT;
			case PL_STENCIL_OP_INCREMENT_AND_WRAP:
				return VK_STENCIL_OP_INCREMENT_AND_WRAP;
			case PL_STENCIL_OP_DECREMENT_AND_WRAP:
				return VK_STENCIL_OP_DECREMENT_AND_WRAP;
			default:
				return VK_STENCIL_OP_KEEP;
		}
	}

	static VkStencilOpState PlStencilOpStateToVkStencilOpState(const PlStencilOpState& state) {
		VkStencilOpState vkState = {};
		vkState.compareMask = state.compareMask;
		vkState.compareOp = PlCompareOpToVkCompareOp(state.compareOp);
		vkState.depthFailOp = PlStencilOpToVkStencilOp(state.depthFailOp);
		vkState.failOp = PlStencilOpToVkStencilOp(state.failOp);
		vkState.passOp = PlStencilOpToVkStencilOp(state.passOp);
		vkState.reference = state.reference;
		vkState.writeMask = state.writeMask;
		return vkState;
	}

	static VkBlendFactor PlBlendFactorToVkBlendFactor(PlBlendFactor factor) {
		switch (factor) {
			case PL_BLEND_FACTOR_ZERO:
				return VK_BLEND_FACTOR_ZERO;
			case PL_BLEND_FACTOR_ONE:
				return VK_BLEND_FACTOR_ONE;
			case PL_BLEND_FACTOR_SRC_COLOR:
				return VK_BLEND_FACTOR_SRC_COLOR;
			case PL_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
				return VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
			case PL_BLEND_FACTOR_DST_COLOR:
				return VK_BLEND_FACTOR_DST_COLOR;
			case PL_BLEND_FACTOR_ONE_MINUS_DST_COLOR:
				return VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
			case PL_BLEND_FACTOR_SRC_ALPHA:
				return VK_BLEND_FACTOR_SRC_ALPHA;
			case PL_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
				return VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
			case PL_BLEND_FACTOR_DST_ALPHA:
				return VK_BLEND_FACTOR_DST_ALPHA;
			case PL_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
				return VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
			case PL_BLEND_FACTOR_CONSTANT_COLOR:
				return VK_BLEND_FACTOR_CONSTANT_COLOR;
			case PL_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
				return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
			case PL_BLEND_FACTOR_CONSTANT_ALPHA:
				return VK_BLEND_FACTOR_CONSTANT_ALPHA;
			case PL_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
				return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
			case PL_BLEND_FACTOR_SRC_ALPHA_SATURATE:
				return VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;
			case PL_BLEND_FACTOR_SRC1_COLOR:
				return VK_BLEND_FACTOR_SRC1_COLOR;
			case PL_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:
				return VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
			case PL_BLEND_FACTOR_SRC1_ALPHA:
				return VK_BLEND_FACTOR_SRC1_ALPHA;
			case PL_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:
				return VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;
			default:
				return VK_BLEND_FACTOR_ZERO;
		}
	}

	static VkBlendOp PlBlendOpToVkBlendOp(PlBlendOp op) {
		switch (op) {
			case PL_BLEND_OP_ADD:
				return VK_BLEND_OP_ADD;
			case PL_BLEND_OP_SUBTRACT:
				return VK_BLEND_OP_SUBTRACT;
			case PL_BLEND_OP_REVERSE_SUBTRACT:
				return VK_BLEND_OP_REVERSE_SUBTRACT;
			case PL_BLEND_OP_MIN:
				return VK_BLEND_OP_MIN;
			case PL_BLEND_OP_MAX:
				return VK_BLEND_OP_MAX;
			case PL_BLEND_OP_ZERO_EXT:
				return static_cast<VkBlendOp>(1000148000);
			case PL_BLEND_OP_SRC_EXT:
				return static_cast<VkBlendOp>(1000148001);
			case PL_BLEND_OP_DST_EXT:
				return static_cast<VkBlendOp>(1000148002);
			case PL_BLEND_OP_SRC_OVER_EXT:
				return static_cast<VkBlendOp>(1000148003);
			case PL_BLEND_OP_DST_OVER_EXT:
				return static_cast<VkBlendOp>(1000148004);
			case PL_BLEND_OP_SRC_IN_EXT:
				return static_cast<VkBlendOp>(1000148005);
			case PL_BLEND_OP_DST_IN_EXT:
				return static_cast<VkBlendOp>(1000148006);
			case PL_BLEND_OP_SRC_OUT_EXT:
				return static_cast<VkBlendOp>(1000148007);
			case PL_BLEND_OP_DST_OUT_EXT:
				return static_cast<VkBlendOp>(1000148008);
			case PL_BLEND_OP_SRC_ATOP_EXT:
				return static_cast<VkBlendOp>(1000148009);
			case PL_BLEND_OP_DST_ATOP_EXT:
				return static_cast<VkBlendOp>(1000148010);
			case PL_BLEND_OP_XOR_EXT:
				return static_cast<VkBlendOp>(1000148011);
			case PL_BLEND_OP_MULTIPLY_EXT:
				return static_cast<VkBlendOp>(1000148012);
			case PL_BLEND_OP_SCREEN_EXT:
				return static_cast<VkBlendOp>(1000148013);
			case PL_BLEND_OP_OVERLAY_EXT:
				return static_cast<VkBlendOp>(1000148014);
			case PL_BLEND_OP_DARKEN_EXT:
				return static_cast<VkBlendOp>(1000148015);
			case PL_BLEND_OP_LIGHTEN_EXT:
				return static_cast<VkBlendOp>(1000148016);
			case PL_BLEND_OP_COLORDODGE_EXT:
				return static_cast<VkBlendOp>(1000148017);
			case PL_BLEND_OP_COLORBURN_EXT:
				return static_cast<VkBlendOp>(1000148018);
			case PL_BLEND_OP_HARDLIGHT_EXT:
				return static_cast<VkBlendOp>(1000148019);
			case PL_BLEND_OP_SOFTLIGHT_EXT:
				return static_cast<VkBlendOp>(1000148020);
			case PL_BLEND_OP_DIFFERENCE_EXT:
				return static_cast<VkBlendOp>(1000148021);
			case PL_BLEND_OP_EXCLUSION_EXT:
				return static_cast<VkBlendOp>(1000148022);
			case PL_BLEND_OP_INVERT_EXT:
				return static_cast<VkBlendOp>(1000148023);
			case PL_BLEND_OP_INVERT_RGB_EXT:
				return static_cast<VkBlendOp>(1000148024);
			case PL_BLEND_OP_LINEARDODGE_EXT:
				return static_cast<VkBlendOp>(1000148025);
			case PL_BLEND_OP_LINEARBURN_EXT:
				return static_cast<VkBlendOp>(1000148026);
			case PL_BLEND_OP_VIVIDLIGHT_EXT:
				return static_cast<VkBlendOp>(1000148027);
			case PL_BLEND_OP_LINEARLIGHT_EXT:
				return static_cast<VkBlendOp>(1000148028);
			case PL_BLEND_OP_PINLIGHT_EXT:
				return static_cast<VkBlendOp>(1000148029);
			case PL_BLEND_OP_HARDMIX_EXT:
				return static_cast<VkBlendOp>(1000148030);
			case PL_BLEND_OP_HSL_HUE_EXT:
				return static_cast<VkBlendOp>(1000148031);
			case PL_BLEND_OP_HSL_SATURATION_EXT:
				return static_cast<VkBlendOp>(1000148032);
			case PL_BLEND_OP_HSL_COLOR_EXT:
				return static_cast<VkBlendOp>(1000148033);
			case PL_BLEND_OP_HSL_LUMINOSITY_EXT:
				return static_cast<VkBlendOp>(1000148034);
			case PL_BLEND_OP_PLUS_EXT:
				return static_cast<VkBlendOp>(1000148035);
			case PL_BLEND_OP_PLUS_CLAMPED_EXT:
				return static_cast<VkBlendOp>(1000148036);
			case PL_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT:
				return static_cast<VkBlendOp>(1000148037);
			case PL_BLEND_OP_PLUS_DARKER_EXT:
				return static_cast<VkBlendOp>(1000148038);
			case PL_BLEND_OP_MINUS_EXT:
				return static_cast<VkBlendOp>(1000148039);
			case PL_BLEND_OP_MINUS_CLAMPED_EXT:
				return static_cast<VkBlendOp>(1000148040);
			case PL_BLEND_OP_CONTRAST_EXT:
				return static_cast<VkBlendOp>(1000148041);
			case PL_BLEND_OP_INVERT_OVG_EXT:
				return static_cast<VkBlendOp>(1000148042);
			case PL_BLEND_OP_RED_EXT:
				return static_cast<VkBlendOp>(1000148043);
			case PL_BLEND_OP_GREEN_EXT:
				return static_cast<VkBlendOp>(1000148044);
			case PL_BLEND_OP_BLUE_EXT:
				return static_cast<VkBlendOp>(1000148045);
			default:
				return VK_BLEND_OP_ADD;
		}
	}

	static VkColorComponentFlags PlColorComponentFlagsToVkColorComponentFlags(PlColorComponentFlags flags) {
		VkColorComponentFlags newFlags = 0;
		if (flags & PL_COLOR_COMPONENT_R_BIT)
			newFlags |= VK_COLOR_COMPONENT_R_BIT;
		if (flags & PL_COLOR_COMPONENT_G_BIT)
			newFlags |= VK_COLOR_COMPONENT_G_BIT;
		if (flags & PL_COLOR_COMPONENT_B_BIT)
			newFlags |= VK_COLOR_COMPONENT_B_BIT;
		if (flags & PL_COLOR_COMPONENT_A_BIT)
			newFlags |= VK_COLOR_COMPONENT_A_BIT;
		return newFlags;
	}

	static VkLogicOp PlLogicOpToVkLogicOp(PlLogicOp op) {
		switch (op) {
			case PL_LOGIC_OP_CLEAR:
				return VK_LOGIC_OP_CLEAR;
			case PL_LOGIC_OP_AND:
				return VK_LOGIC_OP_AND;
			case PL_LOGIC_OP_AND_REVERSE:
				return VK_LOGIC_OP_AND_REVERSE;
			case PL_LOGIC_OP_COPY:
				return VK_LOGIC_OP_COPY;
			case PL_LOGIC_OP_AND_INVERTED:
				return VK_LOGIC_OP_AND_INVERTED;
			case PL_LOGIC_OP_NO_OP:
				return VK_LOGIC_OP_NO_OP;
			case PL_LOGIC_OP_XOR:
				return VK_LOGIC_OP_XOR;
			case PL_LOGIC_OP_OR:
				return VK_LOGIC_OP_OR;
			case PL_LOGIC_OP_NOR:
				return VK_LOGIC_OP_NOR;
			case PL_LOGIC_OP_EQUIVALENT:
				return VK_LOGIC_OP_EQUIVALENT;
			case PL_LOGIC_OP_INVERT:
				return VK_LOGIC_OP_INVERT;
			case PL_LOGIC_OP_OR_REVERSE:
				return VK_LOGIC_OP_OR_REVERSE;
			case PL_LOGIC_OP_COPY_INVERTED:
				return VK_LOGIC_OP_COPY_INVERTED;
			case PL_LOGIC_OP_OR_INVERTED:
				return VK_LOGIC_OP_OR_INVERTED;
			case PL_LOGIC_OP_NAND:
				return VK_LOGIC_OP_NAND;
			case PL_LOGIC_OP_SET:
				return VK_LOGIC_OP_SET;
			default:
				return VK_LOGIC_OP_CLEAR;
		}
	}

	static VkDynamicState PlDynamicStateToVkDynamicState(PlDynamicState state) {
		switch (state) {
			case PL_DYNAMIC_STATE_VIEWPORT:
				return VK_DYNAMIC_STATE_VIEWPORT;
			case PL_DYNAMIC_STATE_SCISSOR:
				return VK_DYNAMIC_STATE_SCISSOR;
			case PL_DYNAMIC_STATE_LINE_WIDTH:
				return VK_DYNAMIC_STATE_LINE_WIDTH;
			case PL_DYNAMIC_STATE_DEPTH_BIAS:
				return VK_DYNAMIC_STATE_DEPTH_BIAS;
			case PL_DYNAMIC_STATE_BLEND_CONSTANTS:
				return VK_DYNAMIC_STATE_BLEND_CONSTANTS;
			case PL_DYNAMIC_STATE_DEPTH_BOUNDS:
				return VK_DYNAMIC_STATE_DEPTH_BOUNDS;
			case PL_DYNAMIC_STATE_STENCIL_COMPARE_MASK:
				return VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK;
			case PL_DYNAMIC_STATE_STENCIL_WRITE_MASK:
				return VK_DYNAMIC_STATE_STENCIL_WRITE_MASK;
			case PL_DYNAMIC_STATE_STENCIL_REFERENCE:
				return VK_DYNAMIC_STATE_STENCIL_REFERENCE;
			case PL_DYNAMIC_STATE_CULL_MODE:
				return VK_DYNAMIC_STATE_CULL_MODE;
			case PL_DYNAMIC_STATE_FRONT_FACE:
				return VK_DYNAMIC_STATE_FRONT_FACE;
			case PL_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY:
				return VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY;
			case PL_DYNAMIC_STATE_VIEWPORT_WITH_COUNT:
				return VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT;
			case PL_DYNAMIC_STATE_SCISSOR_WITH_COUNT:
				return VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT;
			case PL_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE:
				return VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE;
			case PL_DYNAMIC_STATE_DEPTH_TEST_ENABLE:
				return VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE;
			case PL_DYNAMIC_STATE_DEPTH_WRITE_ENABLE:
				return VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE;
			case PL_DYNAMIC_STATE_DEPTH_COMPARE_OP:
				return VK_DYNAMIC_STATE_DEPTH_COMPARE_OP;
			case PL_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE:
				return VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE;
			case PL_DYNAMIC_STATE_STENCIL_TEST_ENABLE:
				return VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE;
			case PL_DYNAMIC_STATE_STENCIL_OP:
				return VK_DYNAMIC_STATE_STENCIL_OP;
			case PL_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE:
				return VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE;
			case PL_DYNAMIC_STATE_DEPTH_BIAS_ENABLE:
				return VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE;
			case PL_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE:
				return VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE;
			case PL_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV:
				return VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV;
			case PL_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT:
				return VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT;
			case PL_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT:
				return VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT;
			case PL_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT:
				return VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT;
			case PL_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT:
				return VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT;
			case PL_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR:
				return VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR;
			case PL_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV:
				return VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV;
			case PL_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV:
				return VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV;
			case PL_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV:
				return VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV;
			case PL_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV:
				return VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV;
			case PL_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR:
				return VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR;
			case PL_DYNAMIC_STATE_LINE_STIPPLE_EXT:
				return VK_DYNAMIC_STATE_LINE_STIPPLE_EXT;
			case PL_DYNAMIC_STATE_VERTEX_INPUT_EXT:
				return VK_DYNAMIC_STATE_VERTEX_INPUT_EXT;
			case PL_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT:
				return VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT;
			case PL_DYNAMIC_STATE_LOGIC_OP_EXT:
				return VK_DYNAMIC_STATE_LOGIC_OP_EXT;
			case PL_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT:
				return VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT;
			case PL_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT:
				return VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT;
			case PL_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT:
				return VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT;
			case PL_DYNAMIC_STATE_POLYGON_MODE_EXT:
				return VK_DYNAMIC_STATE_POLYGON_MODE_EXT;
			case PL_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT:
				return VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT;
			case PL_DYNAMIC_STATE_SAMPLE_MASK_EXT:
				return VK_DYNAMIC_STATE_SAMPLE_MASK_EXT;
			case PL_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT:
				return VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT;
			case PL_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT:
				return VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT;
			case PL_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT:
				return VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT;
			case PL_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT:
				return VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT;
			case PL_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT:
				return VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT;
			case PL_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT:
				return VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT;
			case PL_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT:
				return VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT;
			case PL_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT:
				return VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT;
			case PL_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT:
				return VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT;
			case PL_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT:
				return VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT;
			case PL_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT:
				return VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT;
			case PL_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT:
				return VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT;
			case PL_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT:
				return VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT;
			case PL_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT:
				return VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT;
			case PL_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT:
				return VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT;
			case PL_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT:
				return VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT;
			case PL_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV:
				return VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV;
			case PL_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV:
				return VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV;
			case PL_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV:
				return VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV;
			case PL_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV:
				return VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV;
			case PL_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV:
				return VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV;
			case PL_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV:
				return VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV;
			case PL_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV:
				return VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV;
			case PL_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV:
				return VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV;
			case PL_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV:
				return VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV;
			case PL_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV:
				return VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV;
			case PL_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT:
				return VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT;
			default:
				return VK_DYNAMIC_STATE_VIEWPORT;
		}
	}

	static VkVertexInputRate PlVertexInputRateToVkVertexInputRate(PlVertexInputRate rate) {
		switch (rate) {
			case PL_VERTEX_INPUT_RATE_VERTEX:
				return VK_VERTEX_INPUT_RATE_VERTEX;
			case PL_VERTEX_INPUT_RATE_INSTANCE:
				return VK_VERTEX_INPUT_RATE_INSTANCE;
			default:
				return VK_VERTEX_INPUT_RATE_VERTEX;
		}
	}

	static VkImageLayout PlImageLayoutToVkImageLayout(PlImageLayout layout) {
		switch (layout) {
			case PL_IMAGE_LAYOUT_UNDEFINED:
				return VK_IMAGE_LAYOUT_UNDEFINED;
			case PL_IMAGE_LAYOUT_GENERAL:
				return VK_IMAGE_LAYOUT_GENERAL;
			case PL_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
				return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
			case PL_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
				return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_READ_ONLY_OPTIMAL:
				return VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
			case PL_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL:
				return VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
			case PL_IMAGE_LAYOUT_PRESENT_SRC_KHR:
				return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
			case PL_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR:
				return VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR;
			case PL_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR:
				return VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR;
			case PL_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR:
				return VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR;
			case PL_IMAGE_LAYOUT_SHARED_PRESENT_KHR:
				return VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
			case PL_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT:
				return VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
			case PL_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR:
				return VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
			default:
				return VK_IMAGE_LAYOUT_UNDEFINED;
		}
	}

	static VkSamplerAddressMode PlAddressModeToVkSamplerAddressMode(PlSamplerAddressMode mode) {
		switch (mode) {
			case PL_SAMPLER_ADDRESS_MODE_REPEAT:
				return VK_SAMPLER_ADDRESS_MODE_REPEAT;
			case PL_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
				return VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
			case PL_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
				return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
			case PL_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
				return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
			case PL_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE:
				return VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
			default:
				return VK_SAMPLER_ADDRESS_MODE_REPEAT;
		}
	}

	class PLAZA_API VulkanBufferBinding : public PlazaBufferBinding {
	  public:
		VulkanBufferBinding() {}
		VulkanBufferBinding(const VulkanBufferBinding& other) = default;
		VulkanBufferBinding(uint64_t descriptorCount, uint8_t binding, PlBufferType type, PlRenderStage stage,
							std::shared_ptr<PlBuffer> buffer)
			: PlazaBufferBinding(descriptorCount, binding, type, stage, buffer) {};
		virtual void Compile(std::set<std::string>& compiledBindings) override;
		virtual void Destroy() override;

		VkDescriptorSetLayoutBinding GetDescriptorLayout() {
			return plvk::descriptorSetLayoutBinding(mBinding, mDescriptorCount,
													PlBufferTypeToVkDescriptorType(mBuffer->mType), nullptr,
													PlRenderStageToVkShaderStage(mStage));
		}

		VkDescriptorBufferInfo GetBufferInfo(unsigned int currentFrame) {
			return plvk::descriptorBufferInfo(static_cast<PlVkBuffer*>(mBuffer.get())->GetBuffer(currentFrame), 0,
											  mBuffer->mMaxItems * mBuffer->mStride);
		}

		VkWriteDescriptorSet GetDescriptorWrite(VkDescriptorSet& descriptorSet, VkDescriptorBufferInfo* bufferInfo) {
			if (mBuffer->mType == PL_BUFFER_PUSH_CONSTANTS)
				return {};

			return plvk::writeDescriptorSet(descriptorSet, this->mBinding, 0,
											PlBufferTypeToVkDescriptorType(mBuffer->mType), mDescriptorCount, nullptr,
											bufferInfo);
		}

		template <class Archive> void serialize(Archive& archive) {
			archive(cereal::base_class<PlazaBufferBinding>(this));
		}

	  private:
	};

	class PLAZA_API VulkanTextureBinding : public PlazaTextureBinding {
	  public:
		VulkanTextureBinding() {}
		VulkanTextureBinding(const VulkanTextureBinding& other) = default;
		VulkanTextureBinding(uint64_t descriptorCount, uint8_t location, uint8_t binding, PlBufferType bufferType,
							 PlRenderStage renderStage, PlImageLayout initialLayout, uint16_t baseMipLevel,
							 uint16_t baseLayerLevel, std::shared_ptr<Texture> texture,
							 PlAttachmentOp attachmentOp = PL_ATTACHMENT_OP_AUTO,
							 bool useAsDepthStencilAttachment = false)
			: PlazaTextureBinding(descriptorCount, location, binding, bufferType, renderStage, initialLayout,
								  baseMipLevel, baseLayerLevel, texture, attachmentOp, useAsDepthStencilAttachment) {
			mName = texture->mAssetName;
		};
		virtual void Compile(std::set<std::string>& compiledBindings) override;
		virtual void Destroy() override;

		VkDescriptorSetLayoutBinding GetDescriptorLayout() {
			return plvk::descriptorSetLayoutBinding(mBinding, mDescriptorCount,
													PlBufferTypeToVkDescriptorType(mBufferType), nullptr,
													PlRenderStageToVkShaderStage(mStage));
		}

		VkDescriptorImageInfo GetImageInfo() {
			if (mTexture == nullptr)
				return VkDescriptorImageInfo{};

			bool useNonDefaultView = mBaseMipLevel != 0 || mBaseLayerLevel != 0;
			if (useNonDefaultView)
				return plvk::descriptorImageInfo(GetTexture()->GetLayout(), mNonDefaultView, GetTexture()->mSampler);
			else
				return plvk::descriptorImageInfo(GetTexture()->GetLayout(), GetTexture()->mImageView,
												 GetTexture()->mSampler);
		}

		VkWriteDescriptorSet GetDescriptorWrite(VkDescriptorSet& descriptorSet, VkDescriptorImageInfo* imageInfo) {
			return plvk::writeDescriptorSet(descriptorSet, this->mBinding, 0,
											PlBufferTypeToVkDescriptorType(mBufferType),
											mMaxBindlessResources > 0 ? 1 : mDescriptorCount, imageInfo, nullptr);
		}

		VulkanTexture* GetTexture() { return static_cast<VulkanTexture*>(mTexture.get()); }

		VkImageView mNonDefaultView = VK_NULL_HANDLE;
		// std::shared_ptr<VulkanTexture> mTexture = nullptr;
		template <class Archive> void serialize(Archive& archive) {
			archive(cereal::base_class<PlazaTextureBinding>(this));
		}

	  private:
	};

	class PLAZA_API VulkanRenderPass : public PlazaRenderPass {
	  public:
		VulkanRenderPass() {}
		VulkanRenderPass(std::string name, int stage, PlRenderPassMode renderMethod, glm::vec2 size, bool flipViewPort)
			: PlazaRenderPass(name, stage, renderMethod, size, flipViewPort) {}
		VulkanRenderPass(const VulkanRenderPass& other) = default;
		// std::vector<std::shared_ptr<VulkanPlazaPipeline>> mPipelines =
		// std::vector<std::shared_ptr<VulkanPlazaPipeline>>();

		virtual void Compile(PlazaRenderGraph* renderGraph) override;
		virtual void BindMainBuffers() override;
		virtual void BindPipelineBuffers(PlazaPipeline* pipeline) override;
		virtual void BindRenderPass() override;
		virtual void EndRenderPass() override;
		virtual void RenderIndirectBuffer(PlazaPipeline* pipeline) override;
		virtual void RenderIndirectBufferShadowMap(PlazaPipeline* pipeline) override;
		virtual void RenderIndirectBufferSpecificEntity(PlazaPipeline* pipeline) override;
		virtual void RenderIndirectBufferSpecificMesh(PlazaPipeline* pipeline) override;
		virtual void RenderIndirectBufferSkinned(PlazaPipeline* pipeline) override;
		virtual void RenderFullScreenQuad(PlazaPipeline* pipeline) override;
		virtual void RunCompute(PlazaPipeline* pipeline) override;
		virtual void RenderCube(PlazaPipeline* pipeline) override;
		virtual void RenderGui(Scene* scene, PlazaPipeline* pipeline) override;
		virtual void RenderGuiRectangle(Scene* scene, PlazaPipeline* pipeline) override;
		virtual void RenderGuiButton(Scene* scene, PlazaPipeline* pipeline) override;
		virtual void RenderGuiText(Scene* scene, PlazaPipeline* pipeline) override;
		virtual void CompilePipeline(std::shared_ptr<PlazaPipeline> plazaPipeline) override;
		virtual void TerminatePipeline(std::shared_ptr<PlazaPipeline> plazaPipeline) override;
		virtual void ResetPipelineCompiledBool() override;
		virtual void ReCompileShaders(bool resetCompiledBool) override;

		virtual std::shared_ptr<PlazaPipeline> AddPipeline(PlPipelineCreateInfo createInfo) override {
			std::shared_ptr<VulkanPlazaPipeline> pipeline = std::make_shared<VulkanPlazaPipeline>();
			pipeline->mCreateInfo = createInfo;
			mPipelines.push_back(pipeline);
			return pipeline;
		}

		VulkanRenderPass* AddInputResource(std::shared_ptr<PlazaShadersBinding> resource) {
			mInputBindings.push_back(resource);
			mInputBindingNames.emplace(resource->mName, resource);
			return this;
		}

		VulkanRenderPass* AddOutputResource(std::shared_ptr<PlazaShadersBinding> resource) {
			mOutputBindings.push_back(resource);
			mOutputBindingNames.emplace(resource->mName, resource);
			return this;
		}

		inline void UpdateCommandBuffer(VkCommandBuffer& commandBuffer) {
			mCommandBuffer = commandBuffer;
			for (auto& renderPass : mChildPasses) {
				static_cast<VulkanRenderPass*>(renderPass.get())->UpdateCommandBuffer(commandBuffer);
			}
		}

		VkRenderPass mRenderPass = VK_NULL_HANDLE;
		VkFramebuffer mFrameBuffer = VK_NULL_HANDLE;

		std::vector<VkDescriptorSet> mDescriptorSets = std::vector<VkDescriptorSet>();
		VkDescriptorSetLayout mDescriptorSetLayout = VK_NULL_HANDLE;

		template <class Archive> void serialize(Archive& archive) {
			archive(cereal::base_class<PlazaRenderPass>(this));
		}

	  private:
		virtual void CompileGraphics(PlazaRenderGraph* renderGraph) override;
		VkCommandBuffer mCommandBuffer = VK_NULL_HANDLE;
		std::vector<VkClearValue> mClearValues = std::vector<VkClearValue>();

		void GetBindingDescriptorSet(const shared_ptr<PlazaShadersBinding>& binding,
									 std::vector<VkDescriptorSetLayoutBinding>& descriptorSets,
									 std::vector<VkDescriptorBindingFlagsEXT>& bindingFlags);
		void GetBindingWriteInfo(const shared_ptr<PlazaShadersBinding>& binding, unsigned int i,
								 std::vector<VkWriteDescriptorSet>& descriptorWrites,
								 std::vector<VkDescriptorBufferInfo*>& bufferInfos,
								 std::vector<VkDescriptorImageInfo*>& imageInfos);
	};

	class PLAZA_API VulkanRenderGraph : public PlazaRenderGraph {
	  public:
		VulkanRenderGraph() {}

		void Execute(Scene* scene, uint8_t imageIndex, uint8_t currentFrame) override;
		void OrderPasses() override;
		bool BindPass(std::string passName) override;
		// void Compile() override;

		void UpdateCommandBuffer(VkCommandBuffer& commandBuffer) { mCommandBuffer = &commandBuffer; }

		VulkanRenderPass* GetRenderPass(std::string name) {
			if (mPasses.find(name) != mPasses.end())
				return (VulkanRenderPass*)mPasses.find(name)->second.get();
			return nullptr;
		}

		void BuildDefaultRenderGraph() override;
		void DebugRendererNodes(const PlViewport& viewport, const std::string& textureToDraw);
		VulkanRenderGraph* BuildSkyboxRenderGraph();
		void RunSkyboxRenderGraph(VulkanRenderGraph* renderGraph);
		void AddPipeline() override;
		void CreatePipeline(PlPipelineCreateInfo createInfo) override;

		void CompileNotBoundBuffers() override {
			for (auto& [key, value] : mBuffers) {
				if (mCompiledBindings.find(value->mName) == mCompiledBindings.end()) {
					value->CreateBuffer(value->mMaxItems * value->mStride,
										PlBufferUsageToVkBufferUsage(value->mBufferUsage),
										PlMemoryUsageToVmaMemoryUsage(value->mMemoryUsage), 0, value->mBufferCount);
					value->CreateMemory(0, value->mBufferCount);
				}
			}
		}

		template <class Archive> void serialize(Archive& archive) {
			archive(cereal::base_class<PlazaRenderGraph>(this));
		}

	  private:
		VkCommandBuffer* mCommandBuffer = VK_NULL_HANDLE;
	};
} // namespace Plaza

// PL_SER_REGISTER_TYPE(VulkanRenderGraph);
// PL_SER_REGISTER_TYPE(VulkanRenderPass);
// PL_SER_REGISTER_TYPE(VulkanTextureBinding);
// PL_SER_REGISTER_TYPE(VulkanBufferBinding);
// PL_SER_REGISTER_POLYMORPHIC_RELATION(PlazaRenderGraph, VulkanRenderGraph);
// PL_SER_REGISTER_POLYMORPHIC_RELATION(PlazaRenderPass, VulkanRenderPass);
// PL_SER_REGISTER_POLYMORPHIC_RELATION(PlazaTextureBinding, VulkanTextureBinding);
// PL_SER_REGISTER_POLYMORPHIC_RELATION(PlazaBufferBinding, VulkanBufferBinding);
