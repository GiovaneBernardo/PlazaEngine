#version 450

struct LightStruct {
    vec3 color;
    float radius;
    vec3 position;
    float intensity;
    float cutoff;
};


struct Cluster {
    int lightsIndex[256];
    int lightsCount;
    vec3 minBounds;
    vec3 maxBounds;
};

layout(push_constant) uniform PushConstants {
    mat4 view;
    mat4 projection;
    int lightCount;
    bool first;
    vec2 screenSize;
    vec2 clusterSize;
} pushConstants;

layout(binding = 0) buffer LightsArray {
    LightStruct lights[];
};

layout(binding = 1) buffer ClusterBuffer {
    Cluster clusters[];
};

//layout(binding = 2) buffer DepthTileBuffer {
//    vec2 tileDepthStats[];
//};

layout(binding = 3) uniform sampler2D depthMap;

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
shared vec4 frustumPlanes[6];

shared int visibleLightIndices[1024];

shared mat4 viewProjection;
const int TILE_SIZE = 32;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    ivec2 location = ivec2(gl_GlobalInvocationID.xy);
    ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
    ivec2 tileID = ivec2(gl_WorkGroupID.xy);
    ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
    uint index = tileID.y * tileNumber.x + tileID.x;
    vec2 clusterCount = ceil(pushConstants.screenSize / pushConstants.clusterSize);
    int totalClusterCount = int(ceil(clusterCount.x * clusterCount.y));
    int x = int(gl_WorkGroupID.x);
    int y = int(gl_WorkGroupID.y);
    int clusterIndex = int(y * clusterCount.x + x);

    if (pushConstants.lightCount <= 0) {
        if (gl_LocalInvocationIndex == 0) {
            clusters[index].lightsCount = 0;
            for (int i = 0; i < pushConstants.lightCount; i++) {
                clusters[index].lightsIndex[i] = -1;
            }
        }
        return;
    }

    vec4 frustumPlanes[6];

    // Initialize shared global values for depth and light count
    if (gl_LocalInvocationIndex == 0) {
        minDepthInt = 0xFFFFFFFF;
        maxDepthInt = 0;
        visibleLightCount = 0;
        viewProjection = pushConstants.projection * pushConstants.view;
    }

    barrier();

    // Step 1: Calculate the minimum and maximum depth values (from the depth buffer) for this group's tile
    float maxDepth, minDepth;
    vec2 text = vec2(location) / vec2(pushConstants.screenSize);
    float depth = texture(depthMap, text).r;
    uint depthInt = floatBitsToUint(depth);
    atomicMin(minDepthInt, depthInt);
    atomicMax(maxDepthInt, depthInt);

    barrier();

    if (gl_LocalInvocationIndex == 0) {
        minDepth = uintBitsToFloat(minDepthInt);
        maxDepth = uintBitsToFloat(maxDepthInt);

        vec2 negativeStep = (2.0 * vec2(tileID)) / vec2(tileNumber);
        vec2 positiveStep = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

        frustumPlanes[0] = vec4(1.0, 0.0, 0.0, 1.0 - negativeStep.x); // Left
        frustumPlanes[1] = vec4(-1.0, 0.0, 0.0, -1.0 + positiveStep.x); // Right
        frustumPlanes[2] = vec4(0.0, 1.0, 0.0, 1.0 - negativeStep.y); // Bottom
        frustumPlanes[3] = vec4(0.0, -1.0, 0.0, -1.0 + positiveStep.y); // Top
        frustumPlanes[4] = vec4(0.0, 0.0, -1.0, minDepth); // Near
        frustumPlanes[5] = vec4(0.0, 0.0, 1.0, maxDepth); // Far

        for (uint i = 0; i < 4; i++) {
            frustumPlanes[i] *= viewProjection;
            frustumPlanes[i] /= length(frustumPlanes[i].xyz);
        }

        frustumPlanes[4] *= pushConstants.view;
        frustumPlanes[4] /= length(frustumPlanes[4].xyz);
        frustumPlanes[5] *= pushConstants.view;
        frustumPlanes[5] /= length(frustumPlanes[5].xyz);
    }

    barrier();

    //tileDepthStats[index] = vec2(minDepth, maxDepth);
    if (gl_LocalInvocationIndex == 0) {
        clusters[clusterIndex].lightsCount = 0;
        for (int i = 0; i < pushConstants.lightCount + 1; i++) {
            clusters[index].lightsIndex[i] = -1;
        }
    }
    barrier();

    uint threadCount = TILE_SIZE * TILE_SIZE;
    uint passCount = (pushConstants.lightCount + threadCount - 1) / threadCount;
    if (gl_LocalInvocationIndex == 0) {
        for (uint i = 0; i < pushConstants.lightCount; i++) {
            uint lightIndex = i;
            if (lightIndex >= pushConstants.lightCount) {
                break;
            }

            vec4 position = vec4(lights[lightIndex].position.xyz, 1.0f);
            float radius = lights[lightIndex].radius;

            float distance = 0.0;
            for (uint j = 0; j < 6; j++) {
                distance = dot(position, frustumPlanes[j]) + pow(radius, radius);
                if (distance <= 0.0) {
                    break;
                }
            }

            if (distance > 0.0) {
                uint offset = atomicAdd(visibleLightCount, 1);
                clusters[index].lightsIndex[offset] = int(lightIndex);
                clusters[index].lightsCount = atomicAdd(clusters[index].lightsCount, 1);
            }
        }
    }
}
