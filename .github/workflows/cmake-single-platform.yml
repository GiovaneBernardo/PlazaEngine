# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Windows and Linux

on:
  push:
  pull_request:

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Debug]
        config:
          - { name: "Windows Latest MSVC", os: windows-latest, cc: "cl", cxx: "cl" }
          - { name: "Ubuntu Latest Clang", os: ubuntu-latest, cc: "clang", cxx: "clang++" }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Initialize Git Submodules
      run: git submodule update --init --recursive

    - name: Install MSVC Build Tools (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

    - name: Setup VulkanCI
      uses: NcStudios/VulkanCI@v1.1
      with:
        sdkVersion: 1.3.261.1

    - name: Configure CMake
      run: cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }}
